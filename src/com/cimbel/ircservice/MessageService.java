/**
 * Autogenerated by Thrift Compiler (0.9.2)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.cimbel.ircservice;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-9-17")
public class MessageService {

    public interface Iface {

        /**
         * Send message to all channel which the user registered to. Return exception if user id not exist.
         *
         * @param userId  - Id which user got when login
         * @param message - Message to be send.
         */
        public void sendMessage(int userId, String message) throws MessageException, org.apache.thrift.TException;

        /**
         * Send message to spesific channel. Return exception if user id not exist or user haven't joined the channel.
         *
         * @param userId  - Id which user got when login
         * @param channel - Channel name
         * @param message - Message to be send.
         */
        public void sendMessageToChannel(int userId, String channel, String message) throws MessageException, org.apache.thrift.TException;

        /**
         * Recieve all message that the user got after login.
         *
         * @param userId - Id which user got when login
         * @return list<string> - List of message
         */
        public List<String> fetchMessage(int userId) throws MessageException, org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void sendMessage(int userId, String message, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void sendMessageToChannel(int userId, String channel, String message, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void fetchMessage(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public void sendMessage(int userId, String message) throws MessageException, org.apache.thrift.TException {
            send_sendMessage(userId, message);
            recv_sendMessage();
        }

        public void send_sendMessage(int userId, String message) throws org.apache.thrift.TException {
            sendMessage_args args = new sendMessage_args();
            args.setUserId(userId);
            args.setMessage(message);
            sendBase("sendMessage", args);
        }

        public void recv_sendMessage() throws MessageException, org.apache.thrift.TException {
            sendMessage_result result = new sendMessage_result();
            receiveBase(result, "sendMessage");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public void sendMessageToChannel(int userId, String channel, String message) throws MessageException, org.apache.thrift.TException {
            send_sendMessageToChannel(userId, channel, message);
            recv_sendMessageToChannel();
        }

        public void send_sendMessageToChannel(int userId, String channel, String message) throws org.apache.thrift.TException {
            sendMessageToChannel_args args = new sendMessageToChannel_args();
            args.setUserId(userId);
            args.setChannel(channel);
            args.setMessage(message);
            sendBase("sendMessageToChannel", args);
        }

        public void recv_sendMessageToChannel() throws MessageException, org.apache.thrift.TException {
            sendMessageToChannel_result result = new sendMessageToChannel_result();
            receiveBase(result, "sendMessageToChannel");
            if (result.ex != null) {
                throw result.ex;
            }
            return;
        }

        public List<String> fetchMessage(int userId) throws MessageException, org.apache.thrift.TException {
            send_fetchMessage(userId);
            return recv_fetchMessage();
        }

        public void send_fetchMessage(int userId) throws org.apache.thrift.TException {
            fetchMessage_args args = new fetchMessage_args();
            args.setUserId(userId);
            sendBase("fetchMessage", args);
        }

        public List<String> recv_fetchMessage() throws MessageException, org.apache.thrift.TException {
            fetchMessage_result result = new fetchMessage_result();
            receiveBase(result, "fetchMessage");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.ex != null) {
                throw result.ex;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetchMessage failed: unknown result");
        }

        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void sendMessage(int userId, String message, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            sendMessage_call method_call = new sendMessage_call(userId, message, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void sendMessageToChannel(int userId, String channel, String message, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            sendMessageToChannel_call method_call = new sendMessageToChannel_call(userId, channel, message, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void fetchMessage(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            fetchMessage_call method_call = new fetchMessage_call(userId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public static class sendMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
            private int userId;
            private String message;

            public sendMessage_call(int userId, String message, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userId = userId;
                this.message = message;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
                sendMessage_args args = new sendMessage_args();
                args.setUserId(userId);
                args.setMessage(message);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws MessageException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_sendMessage();
            }
        }

        public static class sendMessageToChannel_call extends org.apache.thrift.async.TAsyncMethodCall {
            private int userId;
            private String channel;
            private String message;

            public sendMessageToChannel_call(int userId, String channel, String message, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userId = userId;
                this.channel = channel;
                this.message = message;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendMessageToChannel", org.apache.thrift.protocol.TMessageType.CALL, 0));
                sendMessageToChannel_args args = new sendMessageToChannel_args();
                args.setUserId(userId);
                args.setChannel(channel);
                args.setMessage(message);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws MessageException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_sendMessageToChannel();
            }
        }

        public static class fetchMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
            private int userId;

            public fetchMessage_call(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userId = userId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetchMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
                fetchMessage_args args = new fetchMessage_args();
                args.setUserId(userId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<String> getResult() throws MessageException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_fetchMessage();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("sendMessage", new sendMessage());
            processMap.put("sendMessageToChannel", new sendMessageToChannel());
            processMap.put("fetchMessage", new fetchMessage());
            return processMap;
        }

        public static class sendMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendMessage_args> {
            public sendMessage() {
                super("sendMessage");
            }

            public sendMessage_args getEmptyArgsInstance() {
                return new sendMessage_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public sendMessage_result getResult(I iface, sendMessage_args args) throws org.apache.thrift.TException {
                sendMessage_result result = new sendMessage_result();
                try {
                    iface.sendMessage(args.userId, args.message);
                } catch (MessageException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class sendMessageToChannel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendMessageToChannel_args> {
            public sendMessageToChannel() {
                super("sendMessageToChannel");
            }

            public sendMessageToChannel_args getEmptyArgsInstance() {
                return new sendMessageToChannel_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public sendMessageToChannel_result getResult(I iface, sendMessageToChannel_args args) throws org.apache.thrift.TException {
                sendMessageToChannel_result result = new sendMessageToChannel_result();
                try {
                    iface.sendMessageToChannel(args.userId, args.channel, args.message);
                } catch (MessageException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

        public static class fetchMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetchMessage_args> {
            public fetchMessage() {
                super("fetchMessage");
            }

            public fetchMessage_args getEmptyArgsInstance() {
                return new fetchMessage_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public fetchMessage_result getResult(I iface, fetchMessage_args args) throws org.apache.thrift.TException {
                fetchMessage_result result = new fetchMessage_result();
                try {
                    result.success = iface.fetchMessage(args.userId);
                } catch (MessageException ex) {
                    result.ex = ex;
                }
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("sendMessage", new sendMessage());
            processMap.put("sendMessageToChannel", new sendMessageToChannel());
            processMap.put("fetchMessage", new fetchMessage());
            return processMap;
        }

        public static class sendMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendMessage_args, Void> {
            public sendMessage() {
                super("sendMessage");
            }

            public sendMessage_args getEmptyArgsInstance() {
                return new sendMessage_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        sendMessage_result result = new sendMessage_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        sendMessage_result result = new sendMessage_result();
                        if (e instanceof MessageException) {
                            result.ex = (MessageException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, sendMessage_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.sendMessage(args.userId, args.message, resultHandler);
            }
        }

        public static class sendMessageToChannel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendMessageToChannel_args, Void> {
            public sendMessageToChannel() {
                super("sendMessageToChannel");
            }

            public sendMessageToChannel_args getEmptyArgsInstance() {
                return new sendMessageToChannel_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        sendMessageToChannel_result result = new sendMessageToChannel_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        sendMessageToChannel_result result = new sendMessageToChannel_result();
                        if (e instanceof MessageException) {
                            result.ex = (MessageException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, sendMessageToChannel_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.sendMessageToChannel(args.userId, args.channel, args.message, resultHandler);
            }
        }

        public static class fetchMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fetchMessage_args, List<String>> {
            public fetchMessage() {
                super("fetchMessage");
            }

            public fetchMessage_args getEmptyArgsInstance() {
                return new fetchMessage_args();
            }

            public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<List<String>>() {
                    public void onComplete(List<String> o) {
                        fetchMessage_result result = new fetchMessage_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        fetchMessage_result result = new fetchMessage_result();
                        if (e instanceof MessageException) {
                            result.ex = (MessageException) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, fetchMessage_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
                iface.fetchMessage(args.userId, resultHandler);
            }
        }

    }

    public static class sendMessage_args implements org.apache.thrift.TBase<sendMessage_args, sendMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendMessage_args> {
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendMessage_args");
        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short) 1);
        private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short) 2);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        // isset id assignments
        private static final int __USERID_ISSET_ID = 0;

        static {
            schemes.put(StandardScheme.class, new sendMessage_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new sendMessage_argsTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendMessage_args.class, metaDataMap);
        }

        public int userId; // required
        public String message; // required
        private byte __isset_bitfield = 0;

        public sendMessage_args() {
        }

        public sendMessage_args(
                int userId,
                String message) {
            this();
            this.userId = userId;
            setUserIdIsSet(true);
            this.message = message;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public sendMessage_args(sendMessage_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.userId = other.userId;
            if (other.isSetMessage()) {
                this.message = other.message;
            }
        }

        public sendMessage_args deepCopy() {
            return new sendMessage_args(this);
        }

        @Override
        public void clear() {
            setUserIdIsSet(false);
            this.userId = 0;
            this.message = null;
        }

        public int getUserId() {
            return this.userId;
        }

        public sendMessage_args setUserId(int userId) {
            this.userId = userId;
            setUserIdIsSet(true);
            return this;
        }

        public void unsetUserId() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        /**
         * Returns true if field userId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetUserId() {
            return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        public void setUserIdIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
        }

        public String getMessage() {
            return this.message;
        }

        public sendMessage_args setMessage(String message) {
            this.message = message;
            return this;
        }

        public void unsetMessage() {
            this.message = null;
        }

        /**
         * Returns true if field message is set (has been assigned a value) and false otherwise
         */
        public boolean isSetMessage() {
            return this.message != null;
        }

        public void setMessageIsSet(boolean value) {
            if (!value) {
                this.message = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case USER_ID:
                    if (value == null) {
                        unsetUserId();
                    } else {
                        setUserId((Integer) value);
                    }
                    break;

                case MESSAGE:
                    if (value == null) {
                        unsetMessage();
                    } else {
                        setMessage((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case USER_ID:
                    return Integer.valueOf(getUserId());

                case MESSAGE:
                    return getMessage();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case USER_ID:
                    return isSetUserId();
                case MESSAGE:
                    return isSetMessage();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof sendMessage_args)
                return this.equals((sendMessage_args) that);
            return false;
        }

        public boolean equals(sendMessage_args that) {
            if (that == null)
                return false;

            boolean this_present_userId = true;
            boolean that_present_userId = true;
            if (this_present_userId || that_present_userId) {
                if (!(this_present_userId && that_present_userId))
                    return false;
                if (this.userId != that.userId)
                    return false;
            }

            boolean this_present_message = true && this.isSetMessage();
            boolean that_present_message = true && that.isSetMessage();
            if (this_present_message || that_present_message) {
                if (!(this_present_message && that_present_message))
                    return false;
                if (!this.message.equals(that.message))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_userId = true;
            list.add(present_userId);
            if (present_userId)
                list.add(userId);

            boolean present_message = true && (isSetMessage());
            list.add(present_message);
            if (present_message)
                list.add(message);

            return list.hashCode();
        }

        @Override
        public int compareTo(sendMessage_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMessage()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("sendMessage_args(");
            boolean first = true;

            sb.append("userId:");
            sb.append(this.userId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("message:");
            if (this.message == null) {
                sb.append("null");
            } else {
                sb.append(this.message);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USER_ID((short) 1, "userId"),
            MESSAGE((short) 2, "message");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // USER_ID
                        return USER_ID;
                    case 2: // MESSAGE
                        return MESSAGE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class sendMessage_argsStandardSchemeFactory implements SchemeFactory {
            public sendMessage_argsStandardScheme getScheme() {
                return new sendMessage_argsStandardScheme();
            }
        }

        private static class sendMessage_argsStandardScheme extends StandardScheme<sendMessage_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, sendMessage_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.userId = iprot.readI32();
                                struct.setUserIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // MESSAGE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.message = iprot.readString();
                                struct.setMessageIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, sendMessage_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.userId);
                oprot.writeFieldEnd();
                if (struct.message != null) {
                    oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
                    oprot.writeString(struct.message);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class sendMessage_argsTupleSchemeFactory implements SchemeFactory {
            public sendMessage_argsTupleScheme getScheme() {
                return new sendMessage_argsTupleScheme();
            }
        }

        private static class sendMessage_argsTupleScheme extends TupleScheme<sendMessage_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, sendMessage_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetUserId()) {
                    optionals.set(0);
                }
                if (struct.isSetMessage()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetUserId()) {
                    oprot.writeI32(struct.userId);
                }
                if (struct.isSetMessage()) {
                    oprot.writeString(struct.message);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, sendMessage_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.userId = iprot.readI32();
                    struct.setUserIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.message = iprot.readString();
                    struct.setMessageIsSet(true);
                }
            }
        }

    }

    public static class sendMessage_result implements org.apache.thrift.TBase<sendMessage_result, sendMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendMessage_result> {
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendMessage_result");
        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new sendMessage_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new sendMessage_resultTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendMessage_result.class, metaDataMap);
        }

        public MessageException ex; // required

        public sendMessage_result() {
        }

        public sendMessage_result(
                MessageException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public sendMessage_result(sendMessage_result other) {
            if (other.isSetEx()) {
                this.ex = new MessageException(other.ex);
            }
        }

        public sendMessage_result deepCopy() {
            return new sendMessage_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        public MessageException getEx() {
            return this.ex;
        }

        public sendMessage_result setEx(MessageException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /**
         * Returns true if field ex is set (has been assigned a value) and false otherwise
         */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((MessageException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof sendMessage_result)
                return this.equals((sendMessage_result) that);
            return false;
        }

        public boolean equals(sendMessage_result that) {
            if (that == null)
                return false;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_ex = true && (isSetEx());
            list.add(present_ex);
            if (present_ex)
                list.add(ex);

            return list.hashCode();
        }

        @Override
        public int compareTo(sendMessage_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("sendMessage_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class sendMessage_resultStandardSchemeFactory implements SchemeFactory {
            public sendMessage_resultStandardScheme getScheme() {
                return new sendMessage_resultStandardScheme();
            }
        }

        private static class sendMessage_resultStandardScheme extends StandardScheme<sendMessage_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, sendMessage_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new MessageException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, sendMessage_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class sendMessage_resultTupleSchemeFactory implements SchemeFactory {
            public sendMessage_resultTupleScheme getScheme() {
                return new sendMessage_resultTupleScheme();
            }
        }

        private static class sendMessage_resultTupleScheme extends TupleScheme<sendMessage_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, sendMessage_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, sendMessage_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new MessageException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

    }

    public static class sendMessageToChannel_args implements org.apache.thrift.TBase<sendMessageToChannel_args, sendMessageToChannel_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendMessageToChannel_args> {
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendMessageToChannel_args");
        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short) 1);
        private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.STRING, (short) 2);
        private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short) 3);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        // isset id assignments
        private static final int __USERID_ISSET_ID = 0;

        static {
            schemes.put(StandardScheme.class, new sendMessageToChannel_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new sendMessageToChannel_argsTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendMessageToChannel_args.class, metaDataMap);
        }

        public int userId; // required
        public String channel; // required
        public String message; // required
        private byte __isset_bitfield = 0;

        public sendMessageToChannel_args() {
        }

        public sendMessageToChannel_args(
                int userId,
                String channel,
                String message) {
            this();
            this.userId = userId;
            setUserIdIsSet(true);
            this.channel = channel;
            this.message = message;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public sendMessageToChannel_args(sendMessageToChannel_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.userId = other.userId;
            if (other.isSetChannel()) {
                this.channel = other.channel;
            }
            if (other.isSetMessage()) {
                this.message = other.message;
            }
        }

        public sendMessageToChannel_args deepCopy() {
            return new sendMessageToChannel_args(this);
        }

        @Override
        public void clear() {
            setUserIdIsSet(false);
            this.userId = 0;
            this.channel = null;
            this.message = null;
        }

        public int getUserId() {
            return this.userId;
        }

        public sendMessageToChannel_args setUserId(int userId) {
            this.userId = userId;
            setUserIdIsSet(true);
            return this;
        }

        public void unsetUserId() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        /**
         * Returns true if field userId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetUserId() {
            return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        public void setUserIdIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
        }

        public String getChannel() {
            return this.channel;
        }

        public sendMessageToChannel_args setChannel(String channel) {
            this.channel = channel;
            return this;
        }

        public void unsetChannel() {
            this.channel = null;
        }

        /**
         * Returns true if field channel is set (has been assigned a value) and false otherwise
         */
        public boolean isSetChannel() {
            return this.channel != null;
        }

        public void setChannelIsSet(boolean value) {
            if (!value) {
                this.channel = null;
            }
        }

        public String getMessage() {
            return this.message;
        }

        public sendMessageToChannel_args setMessage(String message) {
            this.message = message;
            return this;
        }

        public void unsetMessage() {
            this.message = null;
        }

        /**
         * Returns true if field message is set (has been assigned a value) and false otherwise
         */
        public boolean isSetMessage() {
            return this.message != null;
        }

        public void setMessageIsSet(boolean value) {
            if (!value) {
                this.message = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case USER_ID:
                    if (value == null) {
                        unsetUserId();
                    } else {
                        setUserId((Integer) value);
                    }
                    break;

                case CHANNEL:
                    if (value == null) {
                        unsetChannel();
                    } else {
                        setChannel((String) value);
                    }
                    break;

                case MESSAGE:
                    if (value == null) {
                        unsetMessage();
                    } else {
                        setMessage((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case USER_ID:
                    return Integer.valueOf(getUserId());

                case CHANNEL:
                    return getChannel();

                case MESSAGE:
                    return getMessage();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case USER_ID:
                    return isSetUserId();
                case CHANNEL:
                    return isSetChannel();
                case MESSAGE:
                    return isSetMessage();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof sendMessageToChannel_args)
                return this.equals((sendMessageToChannel_args) that);
            return false;
        }

        public boolean equals(sendMessageToChannel_args that) {
            if (that == null)
                return false;

            boolean this_present_userId = true;
            boolean that_present_userId = true;
            if (this_present_userId || that_present_userId) {
                if (!(this_present_userId && that_present_userId))
                    return false;
                if (this.userId != that.userId)
                    return false;
            }

            boolean this_present_channel = true && this.isSetChannel();
            boolean that_present_channel = true && that.isSetChannel();
            if (this_present_channel || that_present_channel) {
                if (!(this_present_channel && that_present_channel))
                    return false;
                if (!this.channel.equals(that.channel))
                    return false;
            }

            boolean this_present_message = true && this.isSetMessage();
            boolean that_present_message = true && that.isSetMessage();
            if (this_present_message || that_present_message) {
                if (!(this_present_message && that_present_message))
                    return false;
                if (!this.message.equals(that.message))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_userId = true;
            list.add(present_userId);
            if (present_userId)
                list.add(userId);

            boolean present_channel = true && (isSetChannel());
            list.add(present_channel);
            if (present_channel)
                list.add(channel);

            boolean present_message = true && (isSetMessage());
            list.add(present_message);
            if (present_message)
                list.add(message);

            return list.hashCode();
        }

        @Override
        public int compareTo(sendMessageToChannel_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetChannel()).compareTo(other.isSetChannel());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetChannel()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, other.channel);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMessage()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("sendMessageToChannel_args(");
            boolean first = true;

            sb.append("userId:");
            sb.append(this.userId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("channel:");
            if (this.channel == null) {
                sb.append("null");
            } else {
                sb.append(this.channel);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("message:");
            if (this.message == null) {
                sb.append("null");
            } else {
                sb.append(this.message);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USER_ID((short) 1, "userId"),
            CHANNEL((short) 2, "channel"),
            MESSAGE((short) 3, "message");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // USER_ID
                        return USER_ID;
                    case 2: // CHANNEL
                        return CHANNEL;
                    case 3: // MESSAGE
                        return MESSAGE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class sendMessageToChannel_argsStandardSchemeFactory implements SchemeFactory {
            public sendMessageToChannel_argsStandardScheme getScheme() {
                return new sendMessageToChannel_argsStandardScheme();
            }
        }

        private static class sendMessageToChannel_argsStandardScheme extends StandardScheme<sendMessageToChannel_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, sendMessageToChannel_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.userId = iprot.readI32();
                                struct.setUserIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // CHANNEL
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.channel = iprot.readString();
                                struct.setChannelIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // MESSAGE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.message = iprot.readString();
                                struct.setMessageIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, sendMessageToChannel_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.userId);
                oprot.writeFieldEnd();
                if (struct.channel != null) {
                    oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
                    oprot.writeString(struct.channel);
                    oprot.writeFieldEnd();
                }
                if (struct.message != null) {
                    oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
                    oprot.writeString(struct.message);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class sendMessageToChannel_argsTupleSchemeFactory implements SchemeFactory {
            public sendMessageToChannel_argsTupleScheme getScheme() {
                return new sendMessageToChannel_argsTupleScheme();
            }
        }

        private static class sendMessageToChannel_argsTupleScheme extends TupleScheme<sendMessageToChannel_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, sendMessageToChannel_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetUserId()) {
                    optionals.set(0);
                }
                if (struct.isSetChannel()) {
                    optionals.set(1);
                }
                if (struct.isSetMessage()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetUserId()) {
                    oprot.writeI32(struct.userId);
                }
                if (struct.isSetChannel()) {
                    oprot.writeString(struct.channel);
                }
                if (struct.isSetMessage()) {
                    oprot.writeString(struct.message);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, sendMessageToChannel_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.userId = iprot.readI32();
                    struct.setUserIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.channel = iprot.readString();
                    struct.setChannelIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.message = iprot.readString();
                    struct.setMessageIsSet(true);
                }
            }
        }

    }

    public static class sendMessageToChannel_result implements org.apache.thrift.TBase<sendMessageToChannel_result, sendMessageToChannel_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendMessageToChannel_result> {
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendMessageToChannel_result");
        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new sendMessageToChannel_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new sendMessageToChannel_resultTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendMessageToChannel_result.class, metaDataMap);
        }

        public MessageException ex; // required

        public sendMessageToChannel_result() {
        }

        public sendMessageToChannel_result(
                MessageException ex) {
            this();
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public sendMessageToChannel_result(sendMessageToChannel_result other) {
            if (other.isSetEx()) {
                this.ex = new MessageException(other.ex);
            }
        }

        public sendMessageToChannel_result deepCopy() {
            return new sendMessageToChannel_result(this);
        }

        @Override
        public void clear() {
            this.ex = null;
        }

        public MessageException getEx() {
            return this.ex;
        }

        public sendMessageToChannel_result setEx(MessageException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /**
         * Returns true if field ex is set (has been assigned a value) and false otherwise
         */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((MessageException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case EX:
                    return getEx();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case EX:
                    return isSetEx();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof sendMessageToChannel_result)
                return this.equals((sendMessageToChannel_result) that);
            return false;
        }

        public boolean equals(sendMessageToChannel_result that) {
            if (that == null)
                return false;

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_ex = true && (isSetEx());
            list.add(present_ex);
            if (present_ex)
                list.add(ex);

            return list.hashCode();
        }

        @Override
        public int compareTo(sendMessageToChannel_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("sendMessageToChannel_result(");
            boolean first = true;

            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EX((short) 1, "ex");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class sendMessageToChannel_resultStandardSchemeFactory implements SchemeFactory {
            public sendMessageToChannel_resultStandardScheme getScheme() {
                return new sendMessageToChannel_resultStandardScheme();
            }
        }

        private static class sendMessageToChannel_resultStandardScheme extends StandardScheme<sendMessageToChannel_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, sendMessageToChannel_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new MessageException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, sendMessageToChannel_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class sendMessageToChannel_resultTupleSchemeFactory implements SchemeFactory {
            public sendMessageToChannel_resultTupleScheme getScheme() {
                return new sendMessageToChannel_resultTupleScheme();
            }
        }

        private static class sendMessageToChannel_resultTupleScheme extends TupleScheme<sendMessageToChannel_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, sendMessageToChannel_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetEx()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, sendMessageToChannel_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ex = new MessageException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

    }

    public static class fetchMessage_args implements org.apache.thrift.TBase<fetchMessage_args, fetchMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<fetchMessage_args> {
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchMessage_args");
        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short) 1);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        // isset id assignments
        private static final int __USERID_ISSET_ID = 0;

        static {
            schemes.put(StandardScheme.class, new fetchMessage_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new fetchMessage_argsTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchMessage_args.class, metaDataMap);
        }

        public int userId; // required
        private byte __isset_bitfield = 0;

        public fetchMessage_args() {
        }

        public fetchMessage_args(
                int userId) {
            this();
            this.userId = userId;
            setUserIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public fetchMessage_args(fetchMessage_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.userId = other.userId;
        }

        public fetchMessage_args deepCopy() {
            return new fetchMessage_args(this);
        }

        @Override
        public void clear() {
            setUserIdIsSet(false);
            this.userId = 0;
        }

        public int getUserId() {
            return this.userId;
        }

        public fetchMessage_args setUserId(int userId) {
            this.userId = userId;
            setUserIdIsSet(true);
            return this;
        }

        public void unsetUserId() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        /**
         * Returns true if field userId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetUserId() {
            return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
        }

        public void setUserIdIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case USER_ID:
                    if (value == null) {
                        unsetUserId();
                    } else {
                        setUserId((Integer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case USER_ID:
                    return Integer.valueOf(getUserId());

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case USER_ID:
                    return isSetUserId();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof fetchMessage_args)
                return this.equals((fetchMessage_args) that);
            return false;
        }

        public boolean equals(fetchMessage_args that) {
            if (that == null)
                return false;

            boolean this_present_userId = true;
            boolean that_present_userId = true;
            if (this_present_userId || that_present_userId) {
                if (!(this_present_userId && that_present_userId))
                    return false;
                if (this.userId != that.userId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_userId = true;
            list.add(present_userId);
            if (present_userId)
                list.add(userId);

            return list.hashCode();
        }

        @Override
        public int compareTo(fetchMessage_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("fetchMessage_args(");
            boolean first = true;

            sb.append("userId:");
            sb.append(this.userId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USER_ID((short) 1, "userId");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // USER_ID
                        return USER_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class fetchMessage_argsStandardSchemeFactory implements SchemeFactory {
            public fetchMessage_argsStandardScheme getScheme() {
                return new fetchMessage_argsStandardScheme();
            }
        }

        private static class fetchMessage_argsStandardScheme extends StandardScheme<fetchMessage_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, fetchMessage_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.userId = iprot.readI32();
                                struct.setUserIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, fetchMessage_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.userId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class fetchMessage_argsTupleSchemeFactory implements SchemeFactory {
            public fetchMessage_argsTupleScheme getScheme() {
                return new fetchMessage_argsTupleScheme();
            }
        }

        private static class fetchMessage_argsTupleScheme extends TupleScheme<fetchMessage_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, fetchMessage_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetUserId()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetUserId()) {
                    oprot.writeI32(struct.userId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, fetchMessage_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.userId = iprot.readI32();
                    struct.setUserIdIsSet(true);
                }
            }
        }

    }

    public static class fetchMessage_result implements org.apache.thrift.TBase<fetchMessage_result, fetchMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<fetchMessage_result> {
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchMessage_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short) 0);
        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new fetchMessage_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new fetchMessage_resultTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchMessage_result.class, metaDataMap);
        }

        public List<String> success; // required
        public MessageException ex; // required

        public fetchMessage_result() {
        }

        public fetchMessage_result(
                List<String> success,
                MessageException ex) {
            this();
            this.success = success;
            this.ex = ex;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public fetchMessage_result(fetchMessage_result other) {
            if (other.isSetSuccess()) {
                List<String> __this__success = new ArrayList<String>(other.success);
                this.success = __this__success;
            }
            if (other.isSetEx()) {
                this.ex = new MessageException(other.ex);
            }
        }

        public fetchMessage_result deepCopy() {
            return new fetchMessage_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.ex = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<String> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(String elem) {
            if (this.success == null) {
                this.success = new ArrayList<String>();
            }
            this.success.add(elem);
        }

        public List<String> getSuccess() {
            return this.success;
        }

        public fetchMessage_result setSuccess(List<String> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public MessageException getEx() {
            return this.ex;
        }

        public fetchMessage_result setEx(MessageException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /**
         * Returns true if field ex is set (has been assigned a value) and false otherwise
         */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((List<String>) value);
                    }
                    break;

                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((MessageException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case EX:
                    return getEx();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case EX:
                    return isSetEx();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof fetchMessage_result)
                return this.equals((fetchMessage_result) that);
            return false;
        }

        public boolean equals(fetchMessage_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            boolean present_ex = true && (isSetEx());
            list.add(present_ex);
            if (present_ex)
                list.add(ex);

            return list.hashCode();
        }

        @Override
        public int compareTo(fetchMessage_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("fetchMessage_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            EX((short) 1, "ex");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // EX
                        return EX;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class fetchMessage_resultStandardSchemeFactory implements SchemeFactory {
            public fetchMessage_resultStandardScheme getScheme() {
                return new fetchMessage_resultStandardScheme();
            }
        }

        private static class fetchMessage_resultStandardScheme extends StandardScheme<fetchMessage_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, fetchMessage_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                                    struct.success = new ArrayList<String>(_list0.size);
                                    String _elem1;
                                    for (int _i2 = 0; _i2 < _list0.size; ++_i2) {
                                        _elem1 = iprot.readString();
                                        struct.success.add(_elem1);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new MessageException();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, fetchMessage_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
                        for (String _iter3 : struct.success) {
                            oprot.writeString(_iter3);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class fetchMessage_resultTupleSchemeFactory implements SchemeFactory {
            public fetchMessage_resultTupleScheme getScheme() {
                return new fetchMessage_resultTupleScheme();
            }
        }

        private static class fetchMessage_resultTupleScheme extends TupleScheme<fetchMessage_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, fetchMessage_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetEx()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (String _iter4 : struct.success) {
                            oprot.writeString(_iter4);
                        }
                    }
                }
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, fetchMessage_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.success = new ArrayList<String>(_list5.size);
                        String _elem6;
                        for (int _i7 = 0; _i7 < _list5.size; ++_i7) {
                            _elem6 = iprot.readString();
                            struct.success.add(_elem6);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ex = new MessageException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
            }
        }

    }

}
